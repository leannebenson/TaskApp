{"ast":null,"code":"import _toConsumableArray from \"/Users/Leanimalz/Documents/kenzieProjects/Q2/assessment-todo-app-pt3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// (int) The current year\nexport var THIS_YEAR = +new Date().getFullYear(); // (int) The current month starting from 1 - 12\n// 1 => January, 12 => December\n\nexport var THIS_MONTH = +new Date().getMonth() + 1; // Week days names and shortnames\n\nexport var WEEK_DAYS = {\n  Sunday: \"Sun\",\n  Monday: \"Mon\",\n  Tuesday: \"Tue\",\n  Wednesday: \"Wed\",\n  Thursday: \"Thu\",\n  Friday: \"Fri\",\n  Saturday: \"Sat\"\n}; // Calendar months names and shortnames\n\nexport var CALENDAR_MONTHS = {\n  January: \"Jan\",\n  February: \"Feb\",\n  March: \"Mar\",\n  April: \"Apr\",\n  May: \"May\",\n  June: \"Jun\",\n  July: \"Jul\",\n  August: \"Aug\",\n  September: \"Sep\",\n  October: \"Oct\",\n  November: \"Nov\",\n  December: \"Dec\"\n}; // Weeks displayed on calendar\n\nexport var CALENDAR_WEEKS = 6; // Pads a string value with leading zeroes(0) until length is reached\n// For example: zeroPad(5, 2) => \"05\"\n\nexport var zeroPad = function zeroPad(value, length) {\n  return \"\".concat(value).padStart(length, \"0\");\n}; // (int) Number days in a month for a given year from 28 - 31\n\nexport var getMonthDays = function getMonthDays() {\n  var month = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : THIS_MONTH;\n  var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THIS_YEAR;\n  var months30 = [4, 6, 9, 11];\n  var leapYear = year % 4 === 0;\n  return month === 2 ? leapYear ? 29 : 28 : months30.includes(month) ? 30 : 31;\n}; // (int) First day of the month for a given year from 1 - 7\n// 1 => Sunday, 7 => Saturday\n\nexport var getMonthFirstDay = function getMonthFirstDay() {\n  var month = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : THIS_MONTH;\n  var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THIS_YEAR;\n  return +new Date(\"\".concat(year, \"-\").concat(zeroPad(month, 2), \"-01\")).getDay() + 1;\n}; // (bool) Checks if a value is a date - this is just a simple check\n\nexport var isDate = function isDate(date) {\n  var isDate = Object.prototype.toString.call(date) === '[object Date]';\n  var isValidDate = date && !Number.isNaN(date.valueOf());\n  return isDate && isValidDate;\n}; // (bool) Checks if two date values are of the same month and year\n\nexport var isSameMonth = function isSameMonth(date) {\n  var basedate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  if (!(isDate(date) && isDate(basedate))) return false;\n  var basedateMonth = +basedate.getMonth() + 1;\n  var basedateYear = basedate.getFullYear();\n  var dateMonth = +date.getMonth() + 1;\n  var dateYear = date.getFullYear();\n  return +basedateMonth === +dateMonth && +basedateYear === +dateYear;\n}; // (bool) Checks if two date values are the same day\n\nexport var isSameDay = function isSameDay(date) {\n  var basedate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n  if (!(isDate(date) && isDate(basedate))) return false;\n  var basedateDate = basedate.getDate();\n  var basedateMonth = +basedate.getMonth() + 1;\n  var basedateYear = basedate.getFullYear();\n  var dateDate = date.getDate();\n  var dateMonth = +date.getMonth() + 1;\n  var dateYear = date.getFullYear();\n  return +basedateDate === +dateDate && +basedateMonth === +dateMonth && +basedateYear === +dateYear;\n}; // (string) Formats the given date as YYYY-MM-DD\n// Months and Days are zero padded\n\nexport var getDateISO = function getDateISO() {\n  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();\n  if (!isDate(date)) return null;\n  return [date.getFullYear(), zeroPad(+date.getMonth() + 1, 2), zeroPad(+date.getDate(), 2)].join('-');\n}; // ({month, year}) Gets the month and year before the given month and year\n// For example: getPreviousMonth(1, 2000) => {month: 12, year: 1999}\n// while: getPreviousMonth(12, 2000) => {month: 11, year: 2000}\n\nexport var getPreviousMonth = function getPreviousMonth(month, year) {\n  var prevMonth = month > 1 ? month - 1 : 12;\n  var prevMonthYear = month > 1 ? year : year - 1;\n  return {\n    month: prevMonth,\n    year: prevMonthYear\n  };\n}; // ({month, year}) Gets the month and year after the given month and year\n// For example: getNextMonth(1, 2000) => {month: 2, year: 2000}\n// while: getNextMonth(12, 2000) => {month: 1, year: 2001}\n\nexport var getNextMonth = function getNextMonth(month, year) {\n  var nextMonth = month < 12 ? month + 1 : 1;\n  var nextMonthYear = month < 12 ? year : year + 1;\n  return {\n    month: nextMonth,\n    year: nextMonthYear\n  };\n}; // Calendar builder for a month in the specified year\n// Returns an array of the calendar dates.\n// Each calendar date is represented as an array => [YYYY, MM, DD]\n\nexport default (function () {\n  var month = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : THIS_MONTH;\n  var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : THIS_YEAR;\n  // Get number of days in the month and the month's first day\n  var monthDays = getMonthDays(month, year);\n  var monthFirstDay = getMonthFirstDay(month, year); // Get number of days to be displayed from previous and next months\n  // These ensure a total of 42 days (6 weeks) displayed on the calendar\n\n  var daysFromPrevMonth = monthFirstDay - 1;\n  var daysFromNextMonth = CALENDAR_WEEKS * 7 - (daysFromPrevMonth + monthDays); // Get the previous and next months and years\n\n  var _getPreviousMonth = getPreviousMonth(month, year),\n      prevMonth = _getPreviousMonth.month,\n      prevMonthYear = _getPreviousMonth.year;\n\n  var _getNextMonth = getNextMonth(month, year),\n      nextMonth = _getNextMonth.month,\n      nextMonthYear = _getNextMonth.year; // Get number of days in previous month\n\n\n  var prevMonthDays = getMonthDays(prevMonth, prevMonthYear); // Builds dates to be displayed from previous month\n\n  var prevMonthDates = _toConsumableArray(new Array(daysFromPrevMonth)).map(function (n, index) {\n    var day = index + 1 + (prevMonthDays - daysFromPrevMonth);\n    return [prevMonthYear, zeroPad(prevMonth, 2), zeroPad(day, 2)];\n  }); // Builds dates to be displayed from current month\n\n\n  var thisMonthDates = _toConsumableArray(new Array(monthDays)).map(function (n, index) {\n    var day = index + 1;\n    return [year, zeroPad(month, 2), zeroPad(day, 2)];\n  }); // Builds dates to be displayed from next month\n\n\n  var nextMonthDates = _toConsumableArray(new Array(daysFromNextMonth)).map(function (n, index) {\n    var day = index + 1;\n    return [nextMonthYear, zeroPad(nextMonth, 2), zeroPad(day, 2)];\n  }); // Combines all dates from previous, current and next months\n\n\n  return [].concat(_toConsumableArray(prevMonthDates), _toConsumableArray(thisMonthDates), _toConsumableArray(nextMonthDates));\n});","map":{"version":3,"sources":["/Users/Leanimalz/Documents/kenzieProjects/Q2/assessment-todo-app-pt3/src/calendar.js"],"names":["THIS_YEAR","Date","getFullYear","THIS_MONTH","getMonth","WEEK_DAYS","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","CALENDAR_MONTHS","January","February","March","April","May","June","July","August","September","October","November","December","CALENDAR_WEEKS","zeroPad","value","length","padStart","getMonthDays","month","year","months30","leapYear","includes","getMonthFirstDay","getDay","isDate","date","Object","prototype","toString","call","isValidDate","Number","isNaN","valueOf","isSameMonth","basedate","basedateMonth","basedateYear","dateMonth","dateYear","isSameDay","basedateDate","getDate","dateDate","getDateISO","join","getPreviousMonth","prevMonth","prevMonthYear","getNextMonth","nextMonth","nextMonthYear","monthDays","monthFirstDay","daysFromPrevMonth","daysFromNextMonth","prevMonthDays","prevMonthDates","Array","map","n","index","day","thisMonthDates","nextMonthDates"],"mappings":"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","sourcesContent":["// (int) The current year\nexport const THIS_YEAR = +new Date().getFullYear();\n\n// (int) The current month starting from 1 - 12\n// 1 => January, 12 => December\nexport const THIS_MONTH = +new Date().getMonth() + 1;\n\n// Week days names and shortnames\nexport const WEEK_DAYS = {\n  Sunday: \"Sun\",\n  Monday: \"Mon\",\n  Tuesday: \"Tue\",\n  Wednesday: \"Wed\",\n  Thursday: \"Thu\",\n  Friday: \"Fri\",\n  Saturday: \"Sat\",\n};\n\n// Calendar months names and shortnames\nexport const CALENDAR_MONTHS = {\n  January: \"Jan\",\n  February: \"Feb\",\n  March: \"Mar\",\n  April: \"Apr\",\n  May: \"May\",\n  June: \"Jun\",\n  July: \"Jul\",\n  August: \"Aug\",\n  September: \"Sep\",\n  October: \"Oct\",\n  November: \"Nov\",\n  December: \"Dec\",\n};\n\n// Weeks displayed on calendar\nexport const CALENDAR_WEEKS = 6;\n\n// Pads a string value with leading zeroes(0) until length is reached\n// For example: zeroPad(5, 2) => \"05\"\nexport const zeroPad = (value, length) => {\n  return `${value}`.padStart(length, \"0\");\n};\n\n// (int) Number days in a month for a given year from 28 - 31\nexport const getMonthDays = (month = THIS_MONTH, year = THIS_YEAR) => {\n  const months30 = [4, 6, 9, 11];\n  const leapYear = year % 4 === 0;\n\n  return month === 2\n    ? leapYear\n      ? 29\n      : 28\n    : months30.includes(month)\n    ? 30\n    : 31;\n};\n\n// (int) First day of the month for a given year from 1 - 7\n// 1 => Sunday, 7 => Saturday\nexport const getMonthFirstDay = (month = THIS_MONTH, year = THIS_YEAR) => {\n  return +new Date(`${year}-${zeroPad(month, 2)}-01`).getDay() + 1;\n};\n\n// (bool) Checks if a value is a date - this is just a simple check\nexport const isDate = date => {\n  const isDate = Object.prototype.toString.call(date) === '[object Date]';\n  const isValidDate = date && !Number.isNaN(date.valueOf());\n  \n  return isDate && isValidDate;\n}\n\n// (bool) Checks if two date values are of the same month and year\nexport const isSameMonth = (date, basedate = new Date()) => {\n  \n  if (!(isDate(date) && isDate(basedate))) return false;\n\n  const basedateMonth = +(basedate.getMonth()) + 1;\n  const basedateYear = basedate.getFullYear();\n\n  const dateMonth = +(date.getMonth()) + 1;\n  const dateYear = date.getFullYear();\n\n  return (+basedateMonth === +dateMonth) && (+basedateYear === +dateYear);\n  \n}\n\n// (bool) Checks if two date values are the same day\nexport const isSameDay = (date, basedate = new Date()) => {\n  \n  if (!(isDate(date) && isDate(basedate))) return false;\n\n  const basedateDate = basedate.getDate();\n  const basedateMonth = +(basedate.getMonth()) + 1;\n  const basedateYear = basedate.getFullYear();\n\n  const dateDate = date.getDate();\n  const dateMonth = +(date.getMonth()) + 1;\n  const dateYear = date.getFullYear();\n\n  return (+basedateDate === +dateDate) && (+basedateMonth === +dateMonth) && (+basedateYear === +dateYear);\n  \n}\n\n// (string) Formats the given date as YYYY-MM-DD\n// Months and Days are zero padded\nexport const getDateISO = (date = new Date) => {\n  \n  if (!isDate(date)) return null;\n\n  return [\n    date.getFullYear(),\n    zeroPad(+date.getMonth() + 1, 2),\n    zeroPad(+date.getDate(), 2)\n  ].join('-');\n  \n}\n\n// ({month, year}) Gets the month and year before the given month and year\n// For example: getPreviousMonth(1, 2000) => {month: 12, year: 1999}\n// while: getPreviousMonth(12, 2000) => {month: 11, year: 2000}\nexport const getPreviousMonth = (month, year) => {\n  const prevMonth = (month > 1) ? month - 1 : 12;\n  const prevMonthYear = (month > 1) ? year : year - 1;\n\n  return { month: prevMonth, year: prevMonthYear };\n}\n\n// ({month, year}) Gets the month and year after the given month and year\n// For example: getNextMonth(1, 2000) => {month: 2, year: 2000}\n// while: getNextMonth(12, 2000) => {month: 1, year: 2001}\nexport const getNextMonth = (month, year) => {\n  const nextMonth = (month < 12) ? month + 1 : 1;\n  const nextMonthYear = (month < 12) ? year : year + 1;\n\n  return { month: nextMonth, year: nextMonthYear };\n}\n\n// Calendar builder for a month in the specified year\n// Returns an array of the calendar dates.\n// Each calendar date is represented as an array => [YYYY, MM, DD]\n\nexport default (month = THIS_MONTH, year = THIS_YEAR) => {\n  \n  // Get number of days in the month and the month's first day\n  \n  const monthDays = getMonthDays(month, year);\n  const monthFirstDay = getMonthFirstDay(month, year);\n\n  // Get number of days to be displayed from previous and next months\n  // These ensure a total of 42 days (6 weeks) displayed on the calendar\n  \n  const daysFromPrevMonth = monthFirstDay - 1;\n  const daysFromNextMonth = (CALENDAR_WEEKS * 7) - (daysFromPrevMonth + monthDays);\n\n  // Get the previous and next months and years\n  \n  const { month: prevMonth, year: prevMonthYear } = getPreviousMonth(month, year);\n  const { month: nextMonth, year: nextMonthYear } = getNextMonth(month, year);\n\n  // Get number of days in previous month\n  const prevMonthDays = getMonthDays(prevMonth, prevMonthYear);\n\n  // Builds dates to be displayed from previous month\n  \n  const prevMonthDates = [...new Array(daysFromPrevMonth)].map((n, index) => {\n    const day = index + 1 + (prevMonthDays - daysFromPrevMonth);\n    return [ prevMonthYear, zeroPad(prevMonth, 2), zeroPad(day, 2) ];\n  });\n\n  // Builds dates to be displayed from current month\n  \n  const thisMonthDates = [...new Array(monthDays)].map((n, index) => {\n    const day = index + 1;\n    return [year, zeroPad(month, 2), zeroPad(day, 2)];\n  });\n\n  // Builds dates to be displayed from next month\n  \n  const nextMonthDates = [...new Array(daysFromNextMonth)].map((n, index) => {\n    const day = index + 1;\n    return [nextMonthYear, zeroPad(nextMonth, 2), zeroPad(day, 2)];\n  });\n\n  // Combines all dates from previous, current and next months\n  return [ ...prevMonthDates, ...thisMonthDates, ...nextMonthDates ];\n  \n}\n"]},"metadata":{},"sourceType":"module"}